<?php
/**
 * BankAccountCurrency
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * trustshare API
 *
 * Welcome to the trustshare API Reference documentation. Here you can find detailed information about the endpoints we provide as well as the shape of entities within the system.  # Getting Started It only takes a few minutes to begin using our __Sandbox__ environment straight away. Let's begin... 1. __Create an Organisation__ — Head over to the [dashboard](https://dashboard.trustshare.io)   to login and being creating your Organisation. You can provide your logo and your brand's   accent colour to customise the Checkout UI which is instantiated from the [Client SDK](/guides/client-sdk). 1. __Generate an API Key__ — Head to the developers section of the [dashboard](https://dashboard.trustshare.io/developers/api-keys)   and generate a new key pair. The _private key_ is used to interact with the trustshare API,   where-as the _public key_ is used to instantiate the [Client SDK](/guides/client-sdk).  # Environments The trustshare API has two environments, __Sandbox__ and __Live__. Both environments are available under the same endpoint however API Keys and client secrets are prefixed with the environment name. - A __Sandbox__ API Key will be in the format: `sandbox_api_[0-9a-z]`. - A __Live__ API Key will be in the format: `live_api_[0-9a-z]`.  ## Sandbox Our __Sandbox__ environment endeavours to be as close to the __Live__ environment as possible, however, there are a couple of limitations and features which should be noted. - Card payments take around 7 days to settle into accounts. In __Live__ this is generally closer to 2 days. - Manual inbound payments can only be \"faked\" in __Sandbox__ when they are less-than or equal-to `250,000.00`. - Open Banking in __Sandbox__ will always use a \"Mock Bank\" UI to accept the payment.  # Webhooks Payments are, by their very nature, asynchronous. As such methods of payment, including the receipt and release of funds can take an arbitrary amount of time to settle or execute. It is therefore advised to integrate with our _Webhook Events_ to be notified of changes to payments in real-time. For more information about our _Webhooks_, please visit our [Webhook Events](/guide/webhooks) guide.  # Authentication Every API call must include an `Authorization` header containing your API Key.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@trustshare.co
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * BankAccountCurrency Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankAccountCurrency
{
    /**
     * Possible values of this enum
     */
    const AED = 'aed';
const AFN = 'afn';
const ALL = 'all';
const AMD = 'amd';
const ANG = 'ang';
const AOA = 'aoa';
const ARS = 'ars';
const AUD = 'aud';
const AWG = 'awg';
const AZN = 'azn';
const BAM = 'bam';
const BBD = 'bbd';
const BDT = 'bdt';
const BGN = 'bgn';
const BHD = 'bhd';
const BIF = 'bif';
const BMD = 'bmd';
const BND = 'bnd';
const BOB = 'bob';
const BRL = 'brl';
const BSD = 'bsd';
const BTN = 'btn';
const BWP = 'bwp';
const BYN = 'byn';
const BZD = 'bzd';
const CAD = 'cad';
const CDF = 'cdf';
const CHF = 'chf';
const CLP = 'clp';
const CNY = 'cny';
const COP = 'cop';
const CRC = 'crc';
const CUP = 'cup';
const CVE = 'cve';
const CZK = 'czk';
const DJF = 'djf';
const DKK = 'dkk';
const DOP = 'dop';
const DZD = 'dzd';
const EGP = 'egp';
const ERN = 'ern';
const ETB = 'etb';
const EUR = 'eur';
const FJD = 'fjd';
const FKP = 'fkp';
const GBP = 'gbp';
const GEL = 'gel';
const GHS = 'ghs';
const GIP = 'gip';
const GMD = 'gmd';
const GNF = 'gnf';
const GTQ = 'gtq';
const GYD = 'gyd';
const HKD = 'hkd';
const HNL = 'hnl';
const HRK = 'hrk';
const HTG = 'htg';
const HUF = 'huf';
const IDR = 'idr';
const ILS = 'ils';
const INR = 'inr';
const IQD = 'iqd';
const IRR = 'irr';
const ISK = 'isk';
const JMD = 'jmd';
const JOD = 'jod';
const JPY = 'jpy';
const KES = 'kes';
const KGS = 'kgs';
const KHR = 'khr';
const KMF = 'kmf';
const KPW = 'kpw';
const KRW = 'krw';
const KWD = 'kwd';
const KYD = 'kyd';
const KZT = 'kzt';
const LAK = 'lak';
const LBP = 'lbp';
const LKR = 'lkr';
const LRD = 'lrd';
const LSL = 'lsl';
const LTL = 'ltl';
const LVL = 'lvl';
const LYD = 'lyd';
const MAD = 'mad';
const MDL = 'mdl';
const MGA = 'mga';
const MKD = 'mkd';
const MMK = 'mmk';
const MNT = 'mnt';
const MOP = 'mop';
const MRO = 'mro';
const MUR = 'mur';
const MVR = 'mvr';
const MWK = 'mwk';
const MXN = 'mxn';
const MYR = 'myr';
const MZN = 'mzn';
const NAD = 'nad';
const NGN = 'ngn';
const NIO = 'nio';
const NOK = 'nok';
const NPR = 'npr';
const NZD = 'nzd';
const OMR = 'omr';
const PAB = 'pab';
const PEN = 'pen';
const PGK = 'pgk';
const PHP = 'php';
const PKR = 'pkr';
const PLN = 'pln';
const PYG = 'pyg';
const QAR = 'qar';
const RON = 'ron';
const RSD = 'rsd';
const RUB = 'rub';
const RWF = 'rwf';
const SAR = 'sar';
const SBD = 'sbd';
const SCR = 'scr';
const SDG = 'sdg';
const SEK = 'sek';
const SGD = 'sgd';
const SHP = 'shp';
const SLL = 'sll';
const SOS = 'sos';
const SRD = 'srd';
const SSP = 'ssp';
const STD = 'std';
const SYP = 'syp';
const SZL = 'szl';
const THB = 'thb';
const TJS = 'tjs';
const TMT = 'tmt';
const TND = 'tnd';
const TOP = 'top';
const _TRY = 'try';
const TTD = 'ttd';
const TVD = 'tvd';
const TWD = 'twd';
const TZS = 'tzs';
const UAH = 'uah';
const UGX = 'ugx';
const USD = 'usd';
const UYU = 'uyu';
const UZS = 'uzs';
const VED = 'ved';
const VND = 'vnd';
const VUV = 'vuv';
const WST = 'wst';
const XAF = 'xaf';
const XCD = 'xcd';
const XOF = 'xof';
const XPF = 'xpf';
const YER = 'yer';
const ZAR = 'zar';
const ZMW = 'zmw';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::AED,
self::AFN,
self::ALL,
self::AMD,
self::ANG,
self::AOA,
self::ARS,
self::AUD,
self::AWG,
self::AZN,
self::BAM,
self::BBD,
self::BDT,
self::BGN,
self::BHD,
self::BIF,
self::BMD,
self::BND,
self::BOB,
self::BRL,
self::BSD,
self::BTN,
self::BWP,
self::BYN,
self::BZD,
self::CAD,
self::CDF,
self::CHF,
self::CLP,
self::CNY,
self::COP,
self::CRC,
self::CUP,
self::CVE,
self::CZK,
self::DJF,
self::DKK,
self::DOP,
self::DZD,
self::EGP,
self::ERN,
self::ETB,
self::EUR,
self::FJD,
self::FKP,
self::GBP,
self::GEL,
self::GHS,
self::GIP,
self::GMD,
self::GNF,
self::GTQ,
self::GYD,
self::HKD,
self::HNL,
self::HRK,
self::HTG,
self::HUF,
self::IDR,
self::ILS,
self::INR,
self::IQD,
self::IRR,
self::ISK,
self::JMD,
self::JOD,
self::JPY,
self::KES,
self::KGS,
self::KHR,
self::KMF,
self::KPW,
self::KRW,
self::KWD,
self::KYD,
self::KZT,
self::LAK,
self::LBP,
self::LKR,
self::LRD,
self::LSL,
self::LTL,
self::LVL,
self::LYD,
self::MAD,
self::MDL,
self::MGA,
self::MKD,
self::MMK,
self::MNT,
self::MOP,
self::MRO,
self::MUR,
self::MVR,
self::MWK,
self::MXN,
self::MYR,
self::MZN,
self::NAD,
self::NGN,
self::NIO,
self::NOK,
self::NPR,
self::NZD,
self::OMR,
self::PAB,
self::PEN,
self::PGK,
self::PHP,
self::PKR,
self::PLN,
self::PYG,
self::QAR,
self::RON,
self::RSD,
self::RUB,
self::RWF,
self::SAR,
self::SBD,
self::SCR,
self::SDG,
self::SEK,
self::SGD,
self::SHP,
self::SLL,
self::SOS,
self::SRD,
self::SSP,
self::STD,
self::SYP,
self::SZL,
self::THB,
self::TJS,
self::TMT,
self::TND,
self::TOP,
self::_TRY,
self::TTD,
self::TVD,
self::TWD,
self::TZS,
self::UAH,
self::UGX,
self::USD,
self::UYU,
self::UZS,
self::VED,
self::VND,
self::VUV,
self::WST,
self::XAF,
self::XCD,
self::XOF,
self::XPF,
self::YER,
self::ZAR,
self::ZMW,        ];
    }
}
